// <auto-generated />
using System;
using END.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace END.Persistence.Migrations
{
    [DbContext(typeof(EntityDBContext))]
    [Migration("20240111203314_Create")]
    partial class Create
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("END.Domain.Entities.AttributeTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("AttributeTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04215f96-7f97-4626-b6b1-0c60a466dd79"),
                            DataType = "string",
                            Name = "Статус",
                            TypeId = new Guid("d0fb024e-7f8a-4fd9-9cf7-cf8f4259488f")
                        },
                        new
                        {
                            Id = new Guid("b95e63a2-4119-45ca-bb4e-3ff6d2f1b031"),
                            DataType = "string",
                            Name = "Описание",
                            TypeId = new Guid("34daec0b-af9d-46ae-b19c-ac6cdfc962da")
                        },
                        new
                        {
                            Id = new Guid("cd8c3655-d190-481f-94af-4abba625dd15"),
                            DataType = "string",
                            Name = "Автор",
                            TypeId = new Guid("34daec0b-af9d-46ae-b19c-ac6cdfc962da")
                        },
                        new
                        {
                            Id = new Guid("7ef34cb3-5f61-4256-b8ae-b8df3abc9435"),
                            DataType = "int",
                            Name = "Номер",
                            TypeId = new Guid("34daec0b-af9d-46ae-b19c-ac6cdfc962da")
                        });
                });

            modelBuilder.Entity("END.Domain.Entities.AttributeValueEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("DocumentId");

                    b.ToTable("AttributeValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("790bb43a-ce2b-4563-980b-0892323e611c"),
                            AttributeId = new Guid("7ef34cb3-5f61-4256-b8ae-b8df3abc9435"),
                            DocumentId = new Guid("dc1f21fa-d389-4f70-b9a8-e24e253a40f3"),
                            Value = "1488"
                        },
                        new
                        {
                            Id = new Guid("438b96d0-f447-45e8-bb46-995a18f883cd"),
                            AttributeId = new Guid("b95e63a2-4119-45ca-bb4e-3ff6d2f1b031"),
                            DocumentId = new Guid("dc1f21fa-d389-4f70-b9a8-e24e253a40f3"),
                            Value = "Ручку дергать туда сюда"
                        },
                        new
                        {
                            Id = new Guid("f4269fb2-a316-475b-8a02-71dd22eb8d91"),
                            AttributeId = new Guid("cd8c3655-d190-481f-94af-4abba625dd15"),
                            DocumentId = new Guid("dc1f21fa-d389-4f70-b9a8-e24e253a40f3"),
                            Value = "Начальник двери"
                        },
                        new
                        {
                            Id = new Guid("2f8ac9d2-f458-4065-9e96-b492e0a53ffb"),
                            AttributeId = new Guid("04215f96-7f97-4626-b6b1-0c60a466dd79"),
                            DocumentId = new Guid("76ddc547-f53f-42c4-8f65-a3beb462b571"),
                            Value = "Действующий"
                        },
                        new
                        {
                            Id = new Guid("e9c19528-2ef1-4a5d-abcf-663a70916be0"),
                            AttributeId = new Guid("b95e63a2-4119-45ca-bb4e-3ff6d2f1b031"),
                            DocumentId = new Guid("76ddc547-f53f-42c4-8f65-a3beb462b571"),
                            Value = "Старый мельник"
                        },
                        new
                        {
                            Id = new Guid("d088a886-2aa8-45b6-995a-2f72b6448a81"),
                            AttributeId = new Guid("cd8c3655-d190-481f-94af-4abba625dd15"),
                            DocumentId = new Guid("76ddc547-f53f-42c4-8f65-a3beb462b571"),
                            Value = "Начальник всего"
                        });
                });

            modelBuilder.Entity("END.Domain.Entities.DocumentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc1f21fa-d389-4f70-b9a8-e24e253a40f3"),
                            Name = "Инструкция закрывания двери",
                            TypeId = new Guid("d0fb024e-7f8a-4fd9-9cf7-cf8f4259488f")
                        },
                        new
                        {
                            Id = new Guid("76ddc547-f53f-42c4-8f65-a3beb462b571"),
                            Name = "Указ купить 2л пива шефу",
                            TypeId = new Guid("34daec0b-af9d-46ae-b19c-ac6cdfc962da")
                        });
                });

            modelBuilder.Entity("END.Domain.Entities.DocumentLinkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChildDocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentDocumentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChildDocumentId");

                    b.HasIndex("ParentDocumentId");

                    b.ToTable("DocumentLinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0fc55202-6098-419c-9fd3-1bae8d734089"),
                            ChildDocumentId = new Guid("76ddc547-f53f-42c4-8f65-a3beb462b571"),
                            ParentDocumentId = new Guid("dc1f21fa-d389-4f70-b9a8-e24e253a40f3")
                        });
                });

            modelBuilder.Entity("END.Domain.Entities.DocumentTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0fb024e-7f8a-4fd9-9cf7-cf8f4259488f"),
                            Name = "Инструкия"
                        },
                        new
                        {
                            Id = new Guid("34daec0b-af9d-46ae-b19c-ac6cdfc962da"),
                            Name = "Указ"
                        });
                });

            modelBuilder.Entity("END.Domain.Entities.AttributeTypeEntity", b =>
                {
                    b.HasOne("END.Domain.Entities.DocumentTypeEntity", "Type")
                        .WithMany("Attributes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("END.Domain.Entities.AttributeValueEntity", b =>
                {
                    b.HasOne("END.Domain.Entities.AttributeTypeEntity", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("END.Domain.Entities.DocumentEntity", "Document")
                        .WithMany("Attributes")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("END.Domain.Entities.DocumentEntity", b =>
                {
                    b.HasOne("END.Domain.Entities.DocumentTypeEntity", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("END.Domain.Entities.DocumentLinkEntity", b =>
                {
                    b.HasOne("END.Domain.Entities.DocumentEntity", null)
                        .WithMany("ChildDocuments")
                        .HasForeignKey("ChildDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("END.Domain.Entities.DocumentEntity", null)
                        .WithMany("ParentDocuments")
                        .HasForeignKey("ParentDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("END.Domain.Entities.DocumentEntity", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("ChildDocuments");

                    b.Navigation("ParentDocuments");
                });

            modelBuilder.Entity("END.Domain.Entities.DocumentTypeEntity", b =>
                {
                    b.Navigation("Attributes");
                });
#pragma warning restore 612, 618
        }
    }
}
